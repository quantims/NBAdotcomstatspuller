#Categorize 23-24 NBA Defenses
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time

urls = [
    'https://www.nba.com/stats/teams/advanced?SeasonType=Regular+Season&SeasonYear=%7B%7D&dir=A&sort=TEAM_NAME', #Removed seasonyear due to errors
    'https://www.nba.com/stats/teams/isolation?SeasonType=Regular%20Season&SeasonYear={}&TypeGrouping=defensive&dir=A&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/transition?SeasonYear={}&TypeGrouping=defensive&SeasonType=Regular+Season&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/ball-handler?SeasonType=Regular+Season&SeasonYear={}&TypeGrouping=defensive&dir=A&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/roll-man?SeasonType=Regular%20Season&SeasonYear={}&TypeGrouping=defensive&dir=A&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/playtype-post-up?SeasonType=Regular%20Season&SeasonYear={}&TypeGrouping=defensive&dir=A&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/spot-up?SeasonType=Regular%20Season&SeasonYear={}&TypeGrouping=defensive&dir=A&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/hand-off?SeasonYear={}&SeasonType=Regular+Season&dir=A&TypeGrouping=defensive&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/cut?SeasonType=Regular%20Season&SeasonYear={}&dir=A&TypeGrouping=defensive&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/off-screen?SeasonType=Regular%20Season&SeasonYear={}&TypeGrouping=defensive&dir=A&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/putbacks?SeasonType=Regular%20Season&SeasonYear={}&dir=A&TypeGrouping=defensive&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/playtype-misc?SeasonType=Regular%20Season&SeasonYear={}&TypeGrouping=defensive&dir=A&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/defense?SeasonType=Regular+Season&SeasonYear=%7B%7D&dir=A&sort=TEAM_NAME',
    'https://www.nba.com/stats/teams/defensive-rebounding?Season=2023-24&dir=A&sort=TEAM_NAME', #Added defensive Rebounding
    'https://www.nba.com/stats/teams/defensive-impact?Season=2023-24&dir=A&sort=TEAM_NAME', #Added defensive impact (for DFGM, DFGA, & DFG%)
    'https://www.nba.com/stats/teams/defense-dash-overall?Season=2023-24&dir=A&sort=TEAM_NAME', #Defense dashboard Overall
    'https://www.nba.com/stats/teams/defense-dash-3pt?Season=2023-24&dir=A&sort=TEAM_NAME', #Def dash 3pt
    'https://www.nba.com/stats/teams/defense-dash-2pt?Season=2023-24&dir=A&sort=TEAM_NAME', #Def dash 2pt
    'https://www.nba.com/stats/teams/defense-dash-lt6?Season=2023-24&dir=A&sort=TEAM_NAME', #Def dash <6ft
    'https://www.nba.com/stats/teams/defense-dash-lt10?Season=2023-24&dir=A&sort=TEAM_NAME', #Def dash <10ft
    'https://www.nba.com/stats/teams/defense-dash-gt15?Season=2023-24&dir=A&sort=TEAM_NAME' #Def dash >15ft    
]
# Create an empty DataFrame to store the final result
final_def = pd.DataFrame()

# Create a new Chrome WebDriver instance. Make sure you set this up!!
driver = webdriver.Chrome()

# Iterate through each season. Currently just set to one season
for year in range(2023, 2024):
    season_year = f"{year}-{str(year + 1)[2:]}"
    
    # Create a DataFrame to store the data for the current season
    season_df = pd.DataFrame()

    # Iterate through each URL
    for url in urls:
        url = url.format(season_year)
        # Navigate to the URL
        driver.get(url)

        # Wait for the table to load (timeout of 10 seconds)
        wait = WebDriverWait(driver, 10)
        table_element = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "Crom_table__p1iZz")))

        # Get the table data from the element
        table_data = table_element.get_attribute('outerHTML')

        # Parse the HTML content with BeautifulSoup
        soup = BeautifulSoup(table_data, 'html.parser')

        # Find the table body rows
        table_body = soup.find('tbody')
        rows = table_body.find_all('tr')

        # Create an empty list to store the data
        data = []

        # Extract data from each row
        for row in rows:
            # Get the table cells (including nested elements)
            cells = row.find_all(['td', 'th'])
            row_data = [cell.get_text(strip=True) for cell in cells]
            data.append(row_data)

        # Define column headers (using the first row)
        header_row = rows[0]
        headers = [url + " - " + header.get_text(strip=True) for header in header_row.find_all(['td', 'th'])]

        # Create a DataFrame from the data
        df = pd.DataFrame(data, columns=headers)

        # Merge the DataFrame with the current season DataFrame based on column indices
        season_df = pd.concat([season_df, df], axis=1)

        # Add a delay of 2 seconds before the next request to avoid errors
        time.sleep(2)

    # Reset column indices to numbers for the current season DataFrame
    season_df.columns = range(len(season_df.columns))

    # Append the season year to the end of the string in column 1
    season_df.iloc[:, 0] = season_df.iloc[:, 0] + f" - {season_year}"

    # Append the current season_df to the final_def
    final_def = pd.concat([final_def, season_df])

# Reset the indices of the final_def
final_def.reset_index(drop=True, inplace=True)

# Close the browser
driver.quit()

#Removing irrelevent or redundant columns
columns_to_remove = [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 14, 16, 17, 20, 21, 22, 37, 38, 53, 54, 69, 70, 85, 86, 101, 102, 117, 118, 133, 134, 149, 150, 165, 166, 181, 182, 197, 198, 199, 200, 201,202,212,213,214,215,216,217,224,225,227,228,229,230,235,236,237,238,242,243,244,245,246,251,252,253,254,255,260,261,262,263,264,269,270,271,272,273,278,279,280,281,282,287,288]
columns_to_remove_indices = [col_num - 1 for col_num in columns_to_remove]

final_def = final_def.drop(final_def.columns[columns_to_remove], axis=1)

# Print the final DataFrame
print(final_def)
final_def.to_excel('23-24 NBA Defenses.xlsx',sheet_name='Def',index=False)

#Clustering
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from kneed import KneeLocator

# Assuming final_def is your dataframe
X = final_def.iloc[:, 2:]  # Skip the first two columns for clustering

# Standardizing the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# OPTIONAL: Determine the optimal number of clusters using the Elbow method
wcss = []
range_n_clusters = range(1, 11)  # Test for 1 to 10 clusters

for i in range_n_clusters:
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

# Using the KneeLocator to find the elbow point
knee_locator = KneeLocator(range(1, 11), wcss, curve='convex', direction='decreasing')

optimal_clusters = knee_locator.elbow

# Validate if a knee was found
if optimal_clusters is None:
    print("No clear elbow point found. Consider choosing a number of clusters manually.")
else:
    print(f"Optimal number of clusters: {optimal_clusters}")

    # Apply K-means with the selected number of clusters. Can use optimal_clusters
    kmeans_optimal = KMeans(n_clusters=7, init='k-means++', max_iter=300, n_init=10, random_state=42)
    y_kmeans = kmeans_optimal.fit_predict(X_scaled)

    # Adding the cluster labels to your original dataframe
    final_def['Cluster'] = y_kmeans

#     # Plotting the WCSS to visualize the elbow
#     plt.figure(figsize=(10, 6))
#     plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
#     plt.title('Elbow Method')
#     plt.xlabel('Number of clusters')
#     plt.ylabel('WCSS')
#     plt.vlines(optimal_clusters, plt.ylim()[0], plt.ylim()[1], linestyles='dashed')
#     plt.show()

    # Show the first few rows of the dataframe with the cluster assignments
    print(final_def.head())

#Export to an Excel File 
final_def.to_excel("23-24 NBA Defenses kmeans.xlsx")